/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Token, TokenInterface } from "../Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200172f3803806200172f8339818101604052810190620000379190620002ed565b83600090805190602001906200004f9291906200019d565b508260019080519060200190620000689291906200019d565b5081600360006101000a81548160ff021916908360ff160217905550620000b4338360ff16600a6200009b9190620004d0565b83620000a891906200060d565b620000be60201b60201c565b5050505062000806565b8060026000828254620000d2919062000418565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200012a919062000418565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200019191906200039c565b60405180910390a35050565b828054620001ab90620006bb565b90600052602060002090601f016020900481019282620001cf57600085556200021b565b82601f10620001ea57805160ff19168380011785556200021b565b828001600101855582156200021b579182015b828111156200021a578251825591602001919060010190620001fd565b5b5090506200022a91906200022e565b5090565b5b80821115620002495760008160009055506001016200022f565b5090565b6000620002646200025e84620003e2565b620003b9565b9050828152602081018484840111156200027d57600080fd5b6200028a84828562000685565b509392505050565b600082601f830112620002a457600080fd5b8151620002b68482602086016200024d565b91505092915050565b600081519050620002d081620007d2565b92915050565b600081519050620002e781620007ec565b92915050565b600080600080608085870312156200030457600080fd5b600085015167ffffffffffffffff8111156200031f57600080fd5b6200032d8782880162000292565b945050602085015167ffffffffffffffff8111156200034b57600080fd5b620003598782880162000292565b93505060406200036c87828801620002d6565b92505060606200037f87828801620002bf565b91505092959194509250565b62000396816200066e565b82525050565b6000602082019050620003b360008301846200038b565b92915050565b6000620003c5620003d8565b9050620003d38282620006f1565b919050565b6000604051905090565b600067ffffffffffffffff8211156200040057620003ff62000785565b5b6200040b82620007b4565b9050602081019050919050565b600062000425826200066e565b915062000432836200066e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200046a576200046962000727565b5b828201905092915050565b6000808291508390505b6001851115620004c7578086048111156200049f576200049e62000727565b5b6001851615620004af5780820291505b8081029050620004bf85620007c5565b94506200047f565b94509492505050565b6000620004dd826200066e565b9150620004ea836200066e565b9250620005197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848462000521565b905092915050565b60008262000533576001905062000606565b8162000543576000905062000606565b81600181146200055c576002811462000567576200059d565b600191505062000606565b60ff8411156200057c576200057b62000727565b5b8360020a91508482111562000596576200059562000727565b5b5062000606565b5060208310610133831016604e8410600b8410161715620005d75782820a905083811115620005d157620005d062000727565b5b62000606565b620005e6848484600162000475565b925090508184048111156200060057620005ff62000727565b5b81810290505b9392505050565b60006200061a826200066e565b915062000627836200066e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161562000663576200066262000727565b5b828202905092915050565b6000819050919050565b600060ff82169050919050565b60005b83811015620006a557808201518184015260208101905062000688565b83811115620006b5576000848401525b50505050565b60006002820490506001821680620006d457607f821691505b60208210811415620006eb57620006ea62000756565b5b50919050565b620006fc82620007b4565b810181811067ffffffffffffffff821117156200071e576200071d62000785565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b620007dd816200066e565b8114620007e957600080fd5b50565b620007f78162000678565b81146200080357600080fd5b50565b610f1980620008166000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad9190610b6a565b60405180910390f35b6100d060048036038101906100cb9190610a21565b610292565b6040516100dd9190610b4f565b60405180910390f35b6100ee610384565b6040516100fb9190610c0c565b60405180910390f35b61011e600480360381019061011991906109d2565b61038e565b60405161012b9190610b4f565b60405180910390f35b61013c6104f8565b6040516101499190610c27565b60405180910390f35b61016c6004803603810190610167919061096d565b61050f565b6040516101799190610c0c565b60405180910390f35b61018a610558565b6040516101979190610b6a565b60405180910390f35b6101ba60048036038101906101b59190610a21565b6105ea565b6040516101c79190610b4f565b60405180910390f35b6101ea60048036038101906101e59190610996565b610601565b6040516101f79190610c0c565b60405180910390f35b60606000805461020f90610d70565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610d70565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103729190610c0c565b60405180910390a36001905092915050565b6000600254905090565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561044f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044690610bcc565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104db9190610cb4565b925050819055506104ed848484610688565b600190509392505050565b6000600360009054906101000a900460ff16905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461056790610d70565b80601f016020809104026020016040519081016040528092919081815260200182805461059390610d70565b80156105e05780601f106105b5576101008083540402835291602001916105e0565b820191906000526020600020905b8154815290600101906020018083116105c357829003601f168201915b5050505050905090565b60006105f7338484610688565b6001905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081116106cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c290610b8c565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561074d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074490610bac565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490610bec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561082d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082490610bec565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461087c9190610cb4565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108d29190610c5e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516109369190610c0c565b60405180910390a3505050565b60008135905061095281610eb5565b92915050565b60008135905061096781610ecc565b92915050565b60006020828403121561097f57600080fd5b600061098d84828501610943565b91505092915050565b600080604083850312156109a957600080fd5b60006109b785828601610943565b92505060206109c885828601610943565b9150509250929050565b6000806000606084860312156109e757600080fd5b60006109f586828701610943565b9350506020610a0686828701610943565b9250506040610a1786828701610958565b9150509250925092565b60008060408385031215610a3457600080fd5b6000610a4285828601610943565b9250506020610a5385828601610958565b9150509250929050565b610a6681610cfa565b82525050565b6000610a7782610c42565b610a818185610c4d565b9350610a91818560208601610d3d565b610a9a81610e00565b840191505092915050565b6000610ab2602083610c4d565b9150610abd82610e11565b602082019050919050565b6000610ad5601f83610c4d565b9150610ae082610e3a565b602082019050919050565b6000610af8601883610c4d565b9150610b0382610e63565b602082019050919050565b6000610b1b601183610c4d565b9150610b2682610e8c565b602082019050919050565b610b3a81610d26565b82525050565b610b4981610d30565b82525050565b6000602082019050610b646000830184610a5d565b92915050565b60006020820190508181036000830152610b848184610a6c565b905092915050565b60006020820190508181036000830152610ba581610aa5565b9050919050565b60006020820190508181036000830152610bc581610ac8565b9050919050565b60006020820190508181036000830152610be581610aeb565b9050919050565b60006020820190508181036000830152610c0581610b0e565b9050919050565b6000602082019050610c216000830184610b31565b92915050565b6000602082019050610c3c6000830184610b40565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610c6982610d26565b9150610c7483610d26565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ca957610ca8610da2565b5b828201905092915050565b6000610cbf82610d26565b9150610cca83610d26565b925082821015610cdd57610cdc610da2565b5b828203905092915050565b6000610cf382610d06565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610d5b578082015181840152602081019050610d40565b83811115610d6a576000848401525b50505050565b60006002820490506001821680610d8857607f821691505b60208210811415610d9c57610d9b610dd1565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b7f5472616e7366657220616d6f756e7420657863656564732062616c616e636500600082015250565b7f416d6f756e74206578636565647320616c6c6f77616e63650000000000000000600082015250565b7f4e6f742076616c69642061646472657373000000000000000000000000000000600082015250565b610ebe81610ce8565b8114610ec957600080fd5b50565b610ed581610d26565b8114610ee057600080fd5b5056fea26469706673582212204ddc353bac97f279e71667123d9c3e804c881133ba8be636f3e6601ef0d602db64736f6c63430008040033";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Token";
  }

  deploy(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    _initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Token> {
    return super.deploy(
      name_,
      symbol_,
      decimals_,
      _initialSupply,
      overrides || {}
    ) as Promise<Token>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    _initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      _initialSupply,
      overrides || {}
    );
  }
  attach(address: string): Token {
    return super.attach(address) as Token;
  }
  connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }
  static readonly contractName: "Token";
  public readonly contractName: "Token";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
