/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Token, TokenInterface } from "../Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200177638038062001776833981810160405281019062000037919062000463565b83600090805190602001906200004f9291906200019d565b508260019080519060200190620000689291906200019d565b5081600360006101000a81548160ff021916908360ff160217905550620000b4338360ff16600a6200009b919062000696565b83620000a89190620006e7565b620000be60201b60201c565b5050505062000838565b8060026000828254620000d2919062000748565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200012a919062000748565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620001919190620007b6565b60405180910390a35050565b828054620001ab9062000802565b90600052602060002090601f016020900481019282620001cf57600085556200021b565b82601f10620001ea57805160ff19168380011785556200021b565b828001600101855582156200021b579182015b828111156200021a578251825591602001919060010190620001fd565b5b5090506200022a91906200022e565b5090565b5b80821115620002495760008160009055506001016200022f565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002b6826200026b565b810181811067ffffffffffffffff82111715620002d857620002d76200027c565b5b80604052505050565b6000620002ed6200024d565b9050620002fb8282620002ab565b919050565b600067ffffffffffffffff8211156200031e576200031d6200027c565b5b62000329826200026b565b9050602081019050919050565b60005b838110156200035657808201518184015260208101905062000339565b8381111562000366576000848401525b50505050565b6000620003836200037d8462000300565b620002e1565b905082815260208101848484011115620003a257620003a162000266565b5b620003af84828562000336565b509392505050565b600082601f830112620003cf57620003ce62000261565b5b8151620003e18482602086016200036c565b91505092915050565b600060ff82169050919050565b6200040281620003ea565b81146200040e57600080fd5b50565b6000815190506200042281620003f7565b92915050565b6000819050919050565b6200043d8162000428565b81146200044957600080fd5b50565b6000815190506200045d8162000432565b92915050565b6000806000806080858703121562000480576200047f62000257565b5b600085015167ffffffffffffffff811115620004a157620004a06200025c565b5b620004af87828801620003b7565b945050602085015167ffffffffffffffff811115620004d357620004d26200025c565b5b620004e187828801620003b7565b9350506040620004f48782880162000411565b925050606062000507878288016200044c565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620005a15780860481111562000579576200057862000513565b5b6001851615620005895780820291505b8081029050620005998562000542565b945062000559565b94509492505050565b600082620005bc57600190506200068f565b81620005cc57600090506200068f565b8160018114620005e55760028114620005f05762000626565b60019150506200068f565b60ff84111562000605576200060462000513565b5b8360020a9150848211156200061f576200061e62000513565b5b506200068f565b5060208310610133831016604e8410600b8410161715620006605782820a9050838111156200065a576200065962000513565b5b6200068f565b6200066f84848460016200054f565b9250905081840481111562000689576200068862000513565b5b81810290505b9392505050565b6000620006a38262000428565b9150620006b08362000428565b9250620006df7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620005aa565b905092915050565b6000620006f48262000428565b9150620007018362000428565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156200073d576200073c62000513565b5b828202905092915050565b6000620007558262000428565b9150620007628362000428565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200079a576200079962000513565b5b828201905092915050565b620007b08162000428565b82525050565b6000602082019050620007cd6000830184620007a5565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200081b57607f821691505b60208210811415620008325762000831620007d3565b5b50919050565b610f2e80620008486000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad91906109dc565b60405180910390f35b6100d060048036038101906100cb9190610a97565b610292565b6040516100dd9190610af2565b60405180910390f35b6100ee610384565b6040516100fb9190610b1c565b60405180910390f35b61011e60048036038101906101199190610b37565b61038e565b60405161012b9190610af2565b60405180910390f35b61013c6104f8565b6040516101499190610ba6565b60405180910390f35b61016c60048036038101906101679190610bc1565b61050f565b6040516101799190610b1c565b60405180910390f35b61018a610558565b60405161019791906109dc565b60405180910390f35b6101ba60048036038101906101b59190610a97565b6105ea565b6040516101c79190610af2565b60405180910390f35b6101ea60048036038101906101e59190610bee565b610601565b6040516101f79190610b1c565b60405180910390f35b60606000805461020f90610c5d565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610c5d565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103729190610b1c565b60405180910390a36001905092915050565b6000600254905090565b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561044f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044690610cdb565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104db9190610d2a565b925050819055506104ed848484610688565b600190509392505050565b6000600360009054906101000a900460ff16905090565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461056790610c5d565b80601f016020809104026020016040519081016040528092919081815260200182805461059390610c5d565b80156105e05780601f106105b5576101008083540402835291602001916105e0565b820191906000526020600020905b8154815290600101906020018083116105c357829003601f168201915b5050505050905090565b60006105f7338484610688565b6001905092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081116106cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c290610daa565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561074d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074490610e16565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b490610e82565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561082d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082490610e82565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461087c9190610d2a565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108d29190610ea2565b925050819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516109369190610b1c565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561097d578082015181840152602081019050610962565b8381111561098c576000848401525b50505050565b6000601f19601f8301169050919050565b60006109ae82610943565b6109b8818561094e565b93506109c881856020860161095f565b6109d181610992565b840191505092915050565b600060208201905081810360008301526109f681846109a3565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a2e82610a03565b9050919050565b610a3e81610a23565b8114610a4957600080fd5b50565b600081359050610a5b81610a35565b92915050565b6000819050919050565b610a7481610a61565b8114610a7f57600080fd5b50565b600081359050610a9181610a6b565b92915050565b60008060408385031215610aae57610aad6109fe565b5b6000610abc85828601610a4c565b9250506020610acd85828601610a82565b9150509250929050565b60008115159050919050565b610aec81610ad7565b82525050565b6000602082019050610b076000830184610ae3565b92915050565b610b1681610a61565b82525050565b6000602082019050610b316000830184610b0d565b92915050565b600080600060608486031215610b5057610b4f6109fe565b5b6000610b5e86828701610a4c565b9350506020610b6f86828701610a4c565b9250506040610b8086828701610a82565b9150509250925092565b600060ff82169050919050565b610ba081610b8a565b82525050565b6000602082019050610bbb6000830184610b97565b92915050565b600060208284031215610bd757610bd66109fe565b5b6000610be584828501610a4c565b91505092915050565b60008060408385031215610c0557610c046109fe565b5b6000610c1385828601610a4c565b9250506020610c2485828601610a4c565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c7557607f821691505b60208210811415610c8957610c88610c2e565b5b50919050565b7f416d6f756e74206578636565647320616c6c6f77616e63650000000000000000600082015250565b6000610cc560188361094e565b9150610cd082610c8f565b602082019050919050565b60006020820190508181036000830152610cf481610cb8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d3582610a61565b9150610d4083610a61565b925082821015610d5357610d52610cfb565b5b828203905092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b6000610d9460208361094e565b9150610d9f82610d5e565b602082019050919050565b60006020820190508181036000830152610dc381610d87565b9050919050565b7f5472616e7366657220616d6f756e7420657863656564732062616c616e636500600082015250565b6000610e00601f8361094e565b9150610e0b82610dca565b602082019050919050565b60006020820190508181036000830152610e2f81610df3565b9050919050565b7f4e6f742076616c69642061646472657373000000000000000000000000000000600082015250565b6000610e6c60118361094e565b9150610e7782610e36565b602082019050919050565b60006020820190508181036000830152610e9b81610e5f565b9050919050565b6000610ead82610a61565b9150610eb883610a61565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610eed57610eec610cfb565b5b82820190509291505056fea2646970667358221220f54e232ef881250b0687a102dd2ef68e44dbf086df2bf013415836d6b1b0b22e64736f6c634300080b0033";

type TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Token__factory extends ContractFactory {
  constructor(...args: TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Token";
  }

  deploy(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    _initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Token> {
    return super.deploy(
      name_,
      symbol_,
      decimals_,
      _initialSupply,
      overrides || {}
    ) as Promise<Token>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    decimals_: BigNumberish,
    _initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      _initialSupply,
      overrides || {}
    );
  }
  attach(address: string): Token {
    return super.attach(address) as Token;
  }
  connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }
  static readonly contractName: "Token";
  public readonly contractName: "Token";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenInterface {
    return new utils.Interface(_abi) as TokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}
